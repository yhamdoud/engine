#version 460 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D u_source;
layout(binding = 1) uniform sampler2D u_target_read;
layout(binding = 2) restrict writeonly uniform image2D u_target;

uniform uint u_level;
uniform uint u_target_level;
uniform float u_intensity;
uniform float u_radius;

const uvec2 work_group_size = gl_WorkGroupSize.xy;

vec4 tent_3x3(sampler2D texture, uint level, vec2 tex_coords, vec2 texel_size, vec4 scale)
{
    vec4 o = texel_size.xyxy * vec4(1., 1., -1., 0.) * scale;

    return (
        textureLod(texture, tex_coords - o.xy, level) + 
        textureLod(texture, tex_coords - o.wy, level) * 2.0 +
        textureLod(texture, tex_coords - o.zy, level) +
        textureLod(texture, tex_coords + o.zw, level) * 2.0 +
        textureLod(texture, tex_coords, level) * 4.0 +
        textureLod(texture, tex_coords + o.xw, level) * 2.0 +
        textureLod(texture, tex_coords + o.zy, level) +
        textureLod(texture, tex_coords + o.wy, level) * 2.0 +
        textureLod(texture, tex_coords + o.xy, level)
    ) / 16.;
}

void main()
{
	const uvec2 g_id = gl_GlobalInvocationID.xy;
	const uvec2 l_id = gl_LocalInvocationID.xy;

	const ivec2 target_size = imageSize(u_target);
	const ivec2 source_size = textureSize(u_source, int(u_level));

	const vec2 tex_coords = (vec2(g_id) + vec2(0.5)) / vec2(target_size);
	const vec2 texel_size = vec2(1.0) / vec2(source_size);

    const vec4 target = texelFetch(u_target_read, ivec2(g_id), int(u_target_level));
    const vec4 upsampled = tent_3x3(u_source, u_level, tex_coords, texel_size, vec4(u_radius));

	imageStore(
		u_target,
		ivec2(g_id),
        target + u_intensity * upsampled
	);
}