#version 460 core

#ifdef VALIDATOR
#extension GL_GOOGLE_include_directive : require
#define LOCAL_SIZE 32
#define CASCADE_COUNT 3
#endif

#include "/include/common.h"
#include "/include/math.h"
#include "/include/shadow.h"
#include "/include/uniforms.h"

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;

layout(std140, binding = 0) uniform Uniform { VolumetricUniforms u; };

layout(binding = 1) uniform sampler2D u_g_depth;
layout(binding = 2) uniform sampler2DArrayShadow u_shadow_map;
layout(binding = 5, rgba16f) restrict writeonly uniform image2D u_write;

uniform float u_cascade_distances[CASCADE_COUNT];
uniform mat4 u_light_transforms[CASCADE_COUNT];

float henyey_greenstein(float cos_theta, float g)
{
    return (1. - g * g) / (4. * PI * pow(1. + g * g - 2. * g * cos_theta, 1.5));
}

// TODO: texture might be faster?
// clang-format off
const mat4 bayer = mat4(
    0.,  8.,  2.,  10.,
    12., 4.,  14., 6.,
    3.,  11., 1.,  9.,
    15., 7.,  13., 5.
) / 16.;
// clang-format on

void main()
{
    const ivec2 gid = ivec2(gl_GlobalInvocationID.xy);

    vec2 tex_coords = calc_tex_coords(gid, u.read_size / 2);

    vec4 pos_ndc = vec4(tex_coords * 2. - 1., 0., 1.);
    vec4 pos_view = u.proj_inv * pos_ndc;
    vec3 view_ray = vec3(pos_view.xy / pos_view.z, 1.);

    vec3 ray_end =
        view_ray *
        linearize_depth(textureLod(u_g_depth, tex_coords, 1).r, u.proj);
    // Should be near plane.
    vec3 ray_origin = vec3(0.);

    vec3 ray = ray_end - ray_origin;
    float ray_len = length(ray);
    vec3 ray_dir = ray / ray_len;

    float step_size = ray_len / u.step_count;

    vec3 ray_step = step_size * ray_dir;

    float fog = 0.;

    // Dithering.
    float offset = bayer[gid.x % 4][gid.y % 4];
    vec3 pos = ray_origin + offset * ray_step;

    float factor =
        u.scatter_amount *
        henyey_greenstein(dot(ray_dir, -u.sun_dir), u.scatter_intensity);

    for (int i = 0; i < u.step_count; i++)
    {
        uint cascade_idx = calculate_cascade_index(pos, u_cascade_distances);
        vec4 pos_light =
            u_light_transforms[cascade_idx] * u.view_inv * vec4(pos, 1.);
        pos_light.xyz /= pos_light.w;

        float shadow = 0;

        if (pos_light.z < 1.)
        {
            // Transform NDC to texture space.
            vec3 screen = pos_light.xyz * 0.5 + 0.5;
            shadow =
                texture(u_shadow_map, vec4(screen.xy, cascade_idx, screen.z));
        }

        fog += factor * shadow;

        pos += ray_step;
    }

    imageStore(u_write, gid, vec4(u.sun_color * (fog / u.step_count), 1.));
}