// Parallel reduction to find the luminance histogram mean.
//
// Adapted from: http://www.alextardif.com/HistogramLuminance.html

#version 460 core

#define BIN_COUNT 256

layout(local_size_x = BIN_COUNT) in;

layout (std140, binding = 0) uniform Uniforms
{
    uvec2 size;
    float min_log_luminance;
    float log_luminance_range;
    float log_luminance_range_inverse;
    float dt;
    float tau;
    float target_luminance;
} u;

layout(std430, binding = 1) buffer Ssbo
{
	restrict uint hist[BIN_COUNT];
};

layout(std430, binding = 3) buffer Ssbo2
{
	float luminance_out;
};

shared uint hist_shared[BIN_COUNT];

void main()
{
    const uvec2 gid = gl_GlobalInvocationID.xy;
    const uvec2 lid = gl_LocalInvocationID.xy;
    const uint lidx = gl_LocalInvocationIndex;

    uint cur_bin_count = hist[lidx];
    hist[lidx] = 0;

    // Copy from global to shared memory.
    hist_shared[lidx] = cur_bin_count * lidx;

    // Parallel reduction
    for (uint stride = BIN_COUNT / 2; stride > 0; stride /= 2)
    {
        barrier();

        if (lidx < stride)
            hist_shared[lidx] += hist_shared[lidx + stride];
    }

    if (lidx == 0)
    {
        float log_avg = hist_shared[0];
        // We don't want the earlier discarded pixels in bin 0 to contribute to
        // the histogram average.
        float weighted_log_avg =
            (log_avg / max(float(u.size.x * u.size.y - cur_bin_count), 1.)) - 1.;

        // Reverse the luminance to bin mapping.
        float luminance_avg =
            exp2(((weighted_log_avg / float(BIN_COUNT - 2)) * u.log_luminance_range)
            + u.min_log_luminance);

        // Exponential feedback loop.
        float adapted_luminance =
            mix(luminance_out, luminance_avg, 1 - exp(-u.dt * u.tau));

        luminance_out = adapted_luminance;
    }
}